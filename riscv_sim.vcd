$date
	Mon Mar  3 12:36:22 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module RISC_V_Single_Cycle_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # file [31:0] $end
$var integer 32 $ i [31:0] $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 % reg_write_data [31:0] $end
$var wire 32 & read_data2 [31:0] $end
$var wire 32 ' read_data1 [31:0] $end
$var wire 32 ( mem_read_data [31:0] $end
$var wire 32 ) instr [31:0] $end
$var wire 32 * imm [31:0] $end
$var wire 32 + branch_target [31:0] $end
$var wire 1 , branch_taken $end
$var wire 1 - RegWrite $end
$var wire 32 . PC [31:0] $end
$var wire 1 / MemtoReg $end
$var wire 1 0 MemWrite $end
$var wire 1 1 MemRead $end
$var wire 1 2 Branch $end
$var wire 32 3 ALU_result [31:0] $end
$var wire 1 4 ALUSrc $end
$var wire 3 5 ALUOp [2:0] $end
$scope module decode $end
$var wire 1 ! clk $end
$var wire 32 6 read_data1 [31:0] $end
$var wire 32 7 read_data2 [31:0] $end
$var wire 1 " rst $end
$var wire 32 8 reg_write_data [31:0] $end
$var wire 7 9 opcode [6:0] $end
$var wire 32 : instr [31:0] $end
$var wire 32 ; imm [31:0] $end
$var wire 1 - RegWrite $end
$var wire 1 / MemtoReg $end
$var wire 1 0 MemWrite $end
$var wire 1 1 MemRead $end
$var wire 1 < Jump $end
$var wire 1 2 Branch $end
$var wire 1 = AUIPC $end
$var wire 1 4 ALUSrc $end
$var wire 3 > ALUOp [2:0] $end
$var integer 32 ? i [31:0] $end
$scope module ctrl $end
$var wire 7 @ opcode [6:0] $end
$var reg 3 A ALUOp [2:0] $end
$var reg 1 4 ALUSrc $end
$var reg 1 = AUIPC $end
$var reg 1 2 Branch $end
$var reg 1 < Jump $end
$var reg 1 1 MemRead $end
$var reg 1 0 MemWrite $end
$var reg 1 / MemtoReg $end
$var reg 1 - RegWrite $end
$upscope $end
$scope module imm_gen $end
$var wire 32 B instr [31:0] $end
$var reg 32 C imm [31:0] $end
$upscope $end
$upscope $end
$scope module execute $end
$var wire 3 D ALUOp [2:0] $end
$var wire 1 4 ALUSrc $end
$var wire 1 2 Branch $end
$var wire 1 , branch_taken $end
$var wire 3 E funct3 [2:0] $end
$var wire 32 F imm [31:0] $end
$var wire 32 G read_data1 [31:0] $end
$var wire 32 H read_data2 [31:0] $end
$var wire 1 I zero $end
$var wire 32 J operand2 [31:0] $end
$var wire 32 K branch_target [31:0] $end
$var wire 4 L alu_control [3:0] $end
$var wire 32 M PC [31:0] $end
$var wire 32 N ALU_result [31:0] $end
$scope module alu $end
$var wire 32 O a [31:0] $end
$var wire 32 P b [31:0] $end
$var wire 1 I zero $end
$var wire 4 Q alu_control [3:0] $end
$var reg 32 R result [31:0] $end
$upscope $end
$scope module alu_ctrl $end
$var wire 3 S ALUOp [2:0] $end
$var wire 3 T funct3 [2:0] $end
$var wire 7 U funct7 [6:0] $end
$var reg 4 V ALU_control [3:0] $end
$upscope $end
$upscope $end
$scope module fetch $end
$var wire 32 W PC [31:0] $end
$var wire 1 , PCSrc $end
$var wire 32 X branch_target [31:0] $end
$var wire 1 ! clk $end
$var wire 32 Y instr [31:0] $end
$var wire 1 " reset $end
$var wire 32 Z next_PC [31:0] $end
$var reg 32 [ PC_reg [31:0] $end
$upscope $end
$scope module memory $end
$var wire 1 1 MemRead $end
$var wire 1 0 MemWrite $end
$var wire 32 \ address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 ] write_data [31:0] $end
$var wire 32 ^ read_data [31:0] $end
$upscope $end
$scope module writeback $end
$var wire 32 _ ALU_result [31:0] $end
$var wire 1 / MemtoReg $end
$var wire 32 ` mem_read_data [31:0] $end
$var wire 32 a reg_write_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000 a
b0 `
b1000 _
b0 ^
b0 ]
b1000 \
b0 [
b100 Z
b100000000000001010010011 Y
b1000 X
b0 W
b0 V
b0 U
b0 T
b11 S
b1000 R
b0 Q
b1000 P
b0 O
b1000 N
b0 M
b0 L
b1000 K
b1000 J
0I
b0 H
b0 G
b1000 F
b0 E
b11 D
b1000 C
b100000000000001010010011 B
b11 A
b10011 @
b100000 ?
b11 >
0=
0<
b1000 ;
b100000000000001010010011 :
b10011 9
b1000 8
b0 7
b0 6
b11 5
14
b1000 3
02
01
00
0/
b0 .
1-
0,
b1000 +
b1000 *
b100000000000001010010011 )
b0 (
b0 '
b0 &
b1000 %
b1000000 $
bx #
1"
0!
$end
#5000
b100000 ?
1!
#10000
0!
#15000
b100 %
b100 8
b100 a
b100 3
b100 N
b100 R
b100 \
b100 _
b100 J
b100 P
b100 *
b100 ;
b100 C
b100 F
b10000000000001100010011 )
b10000000000001100010011 :
b10000000000001100010011 B
b10000000000001100010011 Y
b1000 Z
b1000 +
b1000 K
b1000 X
b100 .
b100 M
b100 W
b100 [
1!
0"
#20000
0!
#25000
b1100 %
b1100 8
b1100 a
b1100 3
b1100 N
b1100 R
b1100 \
b1100 _
04
1-
b10 5
b10 >
b10 A
b10 D
b10 S
b100 J
b100 P
b100 &
b100 7
b100 H
b100 ]
b1000 '
b1000 6
b1000 G
b1000 O
b110011 9
b110011 @
b0 *
b0 ;
b0 C
b0 F
b11000101000001110110011 )
b11000101000001110110011 :
b11000101000001110110011 B
b11000101000001110110011 Y
b1100 Z
b1000 +
b1000 K
b1000 X
b1000 .
b1000 M
b1000 W
b1000 [
1!
#30000
0!
#35000
b11000 %
b11000 8
b11000 a
b1 J
b1 P
b11000 3
b11000 N
b11000 R
b11000 \
b11000 _
14
1-
b11 5
b11 >
b11 A
b11 D
b11 S
b100 L
b100 Q
b100 V
b0 &
b0 7
b0 H
b0 ]
b1100 '
b1100 6
b1100 G
b1100 O
b10011 9
b10011 @
b1 E
b1 T
b1 *
b1 ;
b1 C
b1 F
b100111001001110010011 )
b100111001001110010011 :
b100111001001110010011 B
b100111001001110010011 Y
b10000 Z
b1101 +
b1101 K
b1101 X
b1100 .
b1100 M
b1100 W
b1100 [
1!
#40000
0!
#45000
0I
10
14
0-
b0 5
b0 >
b0 A
b0 D
b0 S
b0 L
b0 Q
b0 V
b1000 J
b1000 P
b10000 %
b10000 8
b10000 a
b11000 &
b11000 7
b11000 H
b11000 ]
b100011 9
b100011 @
b10 E
b10 T
b1000 *
b1000 ;
b1000 C
b1000 F
b10000 3
b10000 N
b10000 R
b10000 \
b10000 _
b11100101010010000100011 )
b11100101010010000100011 :
b11100101010010000100011 B
b11100101010010000100011 Y
b10100 Z
b1000 '
b1000 6
b1000 G
b1000 O
b11000 +
b11000 K
b11000 X
b10000 .
b10000 M
b10000 W
b10000 [
1!
#50000
0!
#55000
b0 %
b0 8
b0 a
b0 (
b0 ^
b0 `
b1000 3
b1000 N
b1000 R
b1000 \
b1000 _
1/
11
1-
14
00
b0 J
b0 P
b0 &
b0 7
b0 H
b0 ]
b11 9
b11 @
b0 *
b0 ;
b0 C
b0 F
b101010001100000011 )
b101010001100000011 :
b101010001100000011 B
b101010001100000011 Y
b11000 Z
b10100 +
b10100 K
b10100 X
b10100 .
b10100 M
b10100 W
b10100 [
1!
#60000
0!
#65000
b11111111111111111111111111101000 3
b11111111111111111111111111101000 N
b11111111111111111111111111101000 R
b11111111111111111111111111101000 \
b11111111111111111111111111101000 _
b10 L
b10 Q
b10 V
b11111111111111111111111111101000 %
b11111111111111111111111111101000 8
b11111111111111111111111111101000 a
12
b1 5
b1 >
b1 A
b1 D
b1 S
0/
04
01
0-
b11000 J
b11000 P
b11000 &
b11000 7
b11000 H
b11000 ]
b0 '
b0 6
b0 G
b0 O
b1100011 9
b1100011 @
b0 E
b0 T
b1000 *
b1000 ;
b1000 C
b1000 F
b11100110000010001100011 )
b11100110000010001100011 :
b11100110000010001100011 B
b11100110000010001100011 Y
b11100 Z
b100000 +
b100000 K
b100000 X
b11000 .
b11000 M
b11000 W
b11000 [
1!
#70000
0!
#75000
b1001 %
b1001 8
b1001 a
b0 L
b0 Q
b0 V
b1 J
b1 P
b1001 3
b1001 N
b1001 R
b1001 \
b1001 _
14
1-
02
b11 5
b11 >
b11 A
b11 D
b11 S
b0 &
b0 7
b0 H
b0 ]
b1000 '
b1000 6
b1000 G
b1000 O
b10011 9
b10011 @
b1 *
b1 ;
b1 C
b1 F
b100101000001010010011 )
b100101000001010010011 :
b100101000001010010011 B
b100101000001010010011 Y
b100000 Z
b11101 +
b11101 K
b11101 X
b11100 .
b11100 M
b11100 W
b11100 [
1!
#80000
0!
#85000
xI
04
0-
b0 5
b0 >
b0 A
b0 D
b0 S
bx J
bx P
bx %
bx 8
bx a
bx &
bx 7
bx H
bx ]
bx 9
bx @
bx E
bx T
b0 *
b0 ;
b0 C
b0 F
bx 3
bx N
bx R
bx \
bx _
bx )
bx :
bx B
bx Y
b100100 Z
bx '
bx 6
bx G
bx O
b100000 +
b100000 K
b100000 X
b100000 .
b100000 M
b100000 W
b100000 [
1!
#90000
0!
#95000
b101000 Z
b100100 +
b100100 K
b100100 X
b100100 .
b100100 M
b100100 W
b100100 [
1!
#100000
0!
#105000
b101100 Z
b101000 +
b101000 K
b101000 X
b101000 .
b101000 M
b101000 W
b101000 [
1!
#110000
0!
#115000
b110000 Z
b101100 +
b101100 K
b101100 X
b101100 .
b101100 M
b101100 W
b101100 [
1!
#120000
0!
#125000
b110100 Z
b110000 +
b110000 K
b110000 X
b110000 .
b110000 M
b110000 W
b110000 [
1!
#130000
0!
#135000
b111000 Z
b110100 +
b110100 K
b110100 X
b110100 .
b110100 M
b110100 W
b110100 [
1!
#140000
0!
#145000
b111100 Z
b111000 +
b111000 K
b111000 X
b111000 .
b111000 M
b111000 W
b111000 [
1!
#150000
0!
#155000
b1000000 Z
b111100 +
b111100 K
b111100 X
b111100 .
b111100 M
b111100 W
b111100 [
1!
#160000
0!
#165000
b1000100 Z
b1000000 +
b1000000 K
b1000000 X
b1000000 .
b1000000 M
b1000000 W
b1000000 [
1!
#170000
0!
#175000
b1001000 Z
b1000100 +
b1000100 K
b1000100 X
b1000100 .
b1000100 M
b1000100 W
b1000100 [
1!
#180000
0!
#185000
b1001100 Z
b1001000 +
b1001000 K
b1001000 X
b1001000 .
b1001000 M
b1001000 W
b1001000 [
1!
#190000
0!
#195000
b1010000 Z
b1001100 +
b1001100 K
b1001100 X
b1001100 .
b1001100 M
b1001100 W
b1001100 [
1!
#200000
0!
#205000
b1010100 Z
b1010000 +
b1010000 K
b1010000 X
b1010000 .
b1010000 M
b1010000 W
b1010000 [
1!
#210000
0!
#215000
b1011000 Z
b1010100 +
b1010100 K
b1010100 X
b1010100 .
b1010100 M
b1010100 W
b1010100 [
1!
#220000
0!
#225000
b1011100 Z
b1011000 +
b1011000 K
b1011000 X
b1011000 .
b1011000 M
b1011000 W
b1011000 [
1!
#230000
0!
#235000
b1100000 Z
b1011100 +
b1011100 K
b1011100 X
b1011100 .
b1011100 M
b1011100 W
b1011100 [
1!
#240000
0!
#245000
b1100100 Z
b1100000 +
b1100000 K
b1100000 X
b1100000 .
b1100000 M
b1100000 W
b1100000 [
1!
#250000
0!
#255000
b1101000 Z
b1100100 +
b1100100 K
b1100100 X
b1100100 .
b1100100 M
b1100100 W
b1100100 [
1!
#260000
0!
#265000
b1101100 Z
b1101000 +
b1101000 K
b1101000 X
b1101000 .
b1101000 M
b1101000 W
b1101000 [
1!
#270000
0!
#275000
b1110000 Z
b1101100 +
b1101100 K
b1101100 X
b1101100 .
b1101100 M
b1101100 W
b1101100 [
1!
#280000
0!
#285000
b1110100 Z
b1110000 +
b1110000 K
b1110000 X
b1110000 .
b1110000 M
b1110000 W
b1110000 [
1!
#290000
0!
#295000
b1111000 Z
b1110100 +
b1110100 K
b1110100 X
b1110100 .
b1110100 M
b1110100 W
b1110100 [
1!
#300000
0!
#305000
b1111100 Z
b1111000 +
b1111000 K
b1111000 X
b1111000 .
b1111000 M
b1111000 W
b1111000 [
1!
#310000
0!
#315000
b10000000 Z
b1111100 +
b1111100 K
b1111100 X
b1111100 .
b1111100 M
b1111100 W
b1111100 [
1!
#320000
0!
#325000
b10000100 Z
b10000000 +
b10000000 K
b10000000 X
b10000000 .
b10000000 M
b10000000 W
b10000000 [
1!
#330000
0!
#335000
b10001000 Z
b10000100 +
b10000100 K
b10000100 X
b10000100 .
b10000100 M
b10000100 W
b10000100 [
1!
#340000
0!
#345000
b10001100 Z
b10001000 +
b10001000 K
b10001000 X
b10001000 .
b10001000 M
b10001000 W
b10001000 [
1!
#350000
0!
#355000
b10010000 Z
b10001100 +
b10001100 K
b10001100 X
b10001100 .
b10001100 M
b10001100 W
b10001100 [
1!
#360000
0!
#365000
b10010100 Z
b10010000 +
b10010000 K
b10010000 X
b10010000 .
b10010000 M
b10010000 W
b10010000 [
1!
#370000
0!
#375000
b10011000 Z
b10010100 +
b10010100 K
b10010100 X
b10010100 .
b10010100 M
b10010100 W
b10010100 [
1!
#380000
0!
#385000
b10011100 Z
b10011000 +
b10011000 K
b10011000 X
b10011000 .
b10011000 M
b10011000 W
b10011000 [
1!
#390000
0!
#395000
b10100000 Z
b10011100 +
b10011100 K
b10011100 X
b10011100 .
b10011100 M
b10011100 W
b10011100 [
1!
#400000
0!
#405000
b10100100 Z
b10100000 +
b10100000 K
b10100000 X
b10100000 .
b10100000 M
b10100000 W
b10100000 [
1!
#410000
0!
#415000
b10101000 Z
b10100100 +
b10100100 K
b10100100 X
b10100100 .
b10100100 M
b10100100 W
b10100100 [
1!
#420000
0!
#425000
b10101100 Z
b10101000 +
b10101000 K
b10101000 X
b10101000 .
b10101000 M
b10101000 W
b10101000 [
1!
#430000
0!
#435000
b10110000 Z
b10101100 +
b10101100 K
b10101100 X
b10101100 .
b10101100 M
b10101100 W
b10101100 [
1!
#440000
0!
#445000
b10110100 Z
b10110000 +
b10110000 K
b10110000 X
b10110000 .
b10110000 M
b10110000 W
b10110000 [
1!
#450000
0!
#455000
b10111000 Z
b10110100 +
b10110100 K
b10110100 X
b10110100 .
b10110100 M
b10110100 W
b10110100 [
1!
#460000
0!
#465000
b10111100 Z
b10111000 +
b10111000 K
b10111000 X
b10111000 .
b10111000 M
b10111000 W
b10111000 [
1!
#470000
0!
#475000
b11000000 Z
b10111100 +
b10111100 K
b10111100 X
b10111100 .
b10111100 M
b10111100 W
b10111100 [
1!
#480000
0!
#485000
b11000100 Z
b11000000 +
b11000000 K
b11000000 X
b11000000 .
b11000000 M
b11000000 W
b11000000 [
1!
#490000
0!
#495000
b11001000 Z
b11000100 +
b11000100 K
b11000100 X
b11000100 .
b11000100 M
b11000100 W
b11000100 [
1!
#500000
0!
#505000
b11001100 Z
b11001000 +
b11001000 K
b11001000 X
b11001000 .
b11001000 M
b11001000 W
b11001000 [
1!
#510000
0!
#515000
b11010000 Z
b11001100 +
b11001100 K
b11001100 X
b11001100 .
b11001100 M
b11001100 W
b11001100 [
1!
b10000 $
b10000000000000000000000000000011 #
