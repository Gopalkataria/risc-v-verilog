// Simple RISC-V program for testing
// Format: one 32-bit instruction per line (in hex)
00100093 // addi x1, x0, 1      # x1 = 1
00200113 // addi x2, x0, 2      # x2 = 2
00300193 // addi x3, x0, 3      # x3 = 3
00400213 // addi x4, x0, 4      # x4 = 4
00100293 // addi x5, x0, 1      # x5 = 1
002282b3 // add x5, x5, x2      # x5 = x5 + x2 = 1 + 2 = 3
00328333 // add x6, x5, x3      # x6 = x5 + x3 = 3 + 3 = 6
00430333 // add x6, x6, x4      # x6 = x6 + x4 = 6 + 4 = 10
00130293 // addi x5, x6, 1      # x5 = x6 + 1 = 10 + 1 = 11
003282b3 // add x5, x5, x3      # x5 = x5 + x3 = 11 + 3 = 14
001283b3 // add x7, x5, x1      # x7 = x5 + x1 = 14 + 1 = 15
fff38393 // addi x7, x7, -1     # x7 = x7 - 1 = 15 - 1 = 14
40520233 // sub x4, x4, x5      # x4 = x4 - x5 = 4 - 14 = -10
0041f463 // bgeu x3, x4, 8      # Should not branch (x3=3, x4=-10 unsigned)
00100213 // addi x4, x0, 1      # x4 = 1 (not executed)
0031e463 // bltu x3, x3, 8      # Should not branch (x3=x3)
00828293 // addi x5, x5, 8      # x5 = x5 + 8 = 14 + 8 = 22
00535863 // bge x6, x5, 16      # Should not branch (x6=10, x5=22)
00c28293 // addi x5, x5, 12     # x5 = x5 + 12 = 22 + 12 = 34
fe835ae3 // bge x6, x8, -12     # Should not branch (x8=0, x6=10)
ffc282e3 // beq x5, x28, -8     # Should not branch (x28=0, x5=34)
ff828293 // addi x5, x5, -8     # x5 = x5 - 8 = 34 - 8 = 26
ff028293 // addi x5, x5, -16    # x5 = x5 - 16 = 26 - 16 = 10
40628333 // sub x6, x5, x6      # x6 = x5 - x6 = 10 - 10 = 0
00a30313 // addi x6, x6, 10     # x6 = x6 + 10 = 0 + 10 = 10
00430313 // addi x6, x6, 4      # x6 = x6 + 4 = 10 + 4 = 14
00a00393 // addi x7, x0, 10     # x7 = 10
00430393 // addi x7, x6, 4      # x7 = x6 + 4 = 14 + 4 = 18
ffc38393 // addi x7, x7, -4     # x7 = x7 - 4 = 18 - 4 = 14
ffc282b3 // add x5, x5, x28     # x5 = x5 + x28 = 10 + 0 = 10
00112023 // sw x1, 0(x2)        # Store x1 to mem[x2] = mem[2]
00410183 // lb x3, 4(x2)        # Load byte from mem[x2+4]
00011203 // lh x4, 0(x2)        # Load half from mem[x2]
00012503 // lw x10, 0(x2)       # Load word from mem[x2]
00800293 // addi x5, x0, 8      # x5 = 8
00000063 // beq x0, x0, 0       # Infinite loop (for simulation end)
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000